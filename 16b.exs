input =
  ~S(\..\/|../.-..-....................................|.-..-.......|...--........-......\...\........\............
..\...|.\.........|..|.....................|.....\.........................................-.......|-..../....
......\\\........\............-........\............/.....-|..............|....................\....-.........
................................-..\-.........\.-....-.............................|........\...............\.
................\/..........\................/...........................|./......|...........|...............
......../....|..-........|./..../......................../............./-/....-.....................\.........
../..|/.|.............\..\\.............../...................../..............|....................-.........
...........................\..\......./................/....\......................-........|................/
..........|../.....|./........-.\......../.................../........................|..../......|...........
.........../...../....................-....|.-..........-.........\../..\...\../..|../........|.....\.........
.../........\/....../.......................-......................-|..../.../...-.......-.../................
..........|.....-.././.....|../.\.....................-.......................................-....|.|...|....
............./...-...................|.-...|.-........-.......|..............|......-.........................
........\\..\.................\........-............/|......-.......|........................./.......|.....\.
....|..../..\........................./....|/......../.......-..........|/..........................-.........
.............\...............................................\......\........./.....-..../..\......-...-.....|
.........../.................../...........-......../|.............../.................\../...\...............
................/-.......-......................./....................................-..................|...\
......................................|..................-....\...............|.../.........|..|..|...../.-...
.\......-./..-....\.....\............./...-......\........................-./..//.......-........|............
......|...-...\........|........|........./.....\|.....................\........\.........-....\.....|....|...
....................|.............................-..........................|..........-..../........|.-.....
.-.-.....................|........./.....\........./....\|/..\...........\......./...-.............\.|.../...\
............/...................................................../../................./.-....................
................../.........\.|........./............|........|...............................................
.\............/.-..-......|.....|....-........\..............................|....-.|.........|......./......\
....|..................................-..-......-.............-..-/..........................-........|../...
-..|-.../................-...............|.......-\.........-....../.\..............///....\............../...
.........../......................|........-....-...|....|...-...|......|.................../........-........
........|.........../...............\......................|..-.-.....................|.........-.............
./............/..\......\.....|..\...|........................-.../.......//...|..............\..../\.........
.-...|.-...............\......../.|.../............|.........|../|....././......./........||.\...-............
................-........-/.............../.....-.\/......................../....................\............
....\............./..../.........................-.............\...\.../........../................-/...-...|.
......................................|......./.-....../...................../.....|..........................
.|..................\..........\....-.......-......\..|.-.................-...\.............|......../........
..|...........|./.................\.........................|.........................-\......................
../.../.........../.......-.......-/............./..............\........-..........-..|...\.\/.-..|..........
............./..............-\../..|..\.....................................\............-........-.........|.
.....|-.................|............|/...............................\............/...\.........\............
........\.....\.....\...........\..........-...........................\.......-.......................\../...
........./........|..............................-......\.........................|..|.-.....|....../.........
............-.......\............/...\./.............../\.\..............|............\.../............\......
...../.....\..............|...............................................-......................./...........
...../........|.....................-.....................|.../.....................\.../...../..............\
..........|.........-....................-\............-.....................-...................\..../.......
.............\.........|\..........................\........-.....|.\..............|.......-..\..............\
............./\..\\............|...-/..........-...................//.\.......\................../..........|.
........................|.|.....|......\...-.-...\.......|...|...........\.-.............|......|............|
.....|......|.......\.........\................\\......|......................\.............\..\..............
......................|....../.........|........./.......-...\..............\...||......../..................|
....|..\.-.................|....\.............../.....-......../......................../....../..........|...
./.......|............././../.-...-...........\\..|...\......................../........|....-.\..............
........................|.......|......................-...../....................................../.\.......
....\..-.....|......................\...............|...|\.......|....../......|....\.-../.............../....
....../........-\...|.............|.......................\..................-.........\.......-.....-.....-./
.......|....\.............|.......|....\.../........................|.........................................
.....|.........\.../....-......./......\.........................../................-.................\.......
..|../.../.|.....-../...../..........-....../.\......../........../..................\.....\...-...-...\..|...
..|...........\.\.........\.....-.............-............../...|........./..........\-......................
..../...\............\..........-...../.................................................../......-..|........-
..............\............|................./.\........|.......................|.........\/....-.............
......................-.............\|...|............../........\|../......../........./.\.../\.............|
...........\.....................................\.../.............................|..............-../........
................./...................\......../............................-....\.................\.-.|\......
....-../................|.......\.-.........|...\.|.........\...........\...|.................././.....\......
..-....-....../...-...\/...............\.......\.........................|..|..../.....................\......
/........\......../..............|..............|...|............|...............\............-.|.............
...\./............/....../......--.......-............-..\........\..................\.......\-............./.
-..\-..//......-.............\....\-.|........-|......................./................................../...
...........\......-.........................-.\|...|...........-.....\.......-........|.|.--..|........./.....
.......-........................./............|.............|................./..................-.......|-|./
.......|..........-................../.......................................|..../.......................|...
.....-........../.-../........./\..../.....\...-.....-...............|...../.../.....................\........
.........................|........|\../.../......|.................\..............-|....../..|................
...\...\.....................|.....|....\............|...|...../...|\............-.-........................-.
....................\|..............\...../........../..../........................-..........-...........\...
...\.........................|........-......................./..../................................./........
|......................./.../............../...\....................-.........................-........../|...
.......-../......../....\...................../........................./......\\......\.........\......../...
...-.....-......../..-/........\...............................\..........-.....................|........-....
..-....|............/.|-.........-..............................\.........-.........-....................//-..
...-\......-../..../...|-............................................\...............\...\...\..|\......|.....
......../...........-............................-...........................................\.....\.../......
........................\.......\...\......|.....\..\.-\.............../.......--...../|\.............|/......
.............../...............|....\......-.....|\..................|....-.................-......-........\.
\.......................-........-......|.................................|..-....-................./.........
.........|............\.........../..\......-.................\...\........./|.|.-.........\............./....
.-.........|................................/\......./..........|......................../........\...........
......................................\\...................../........................-\........../.-.......-.
......\....................................../.............................|.../.................\............
........-...|..-...\...\...........-.............-......................../................\..................
...../....../.......................\................/....\.-..-..../........|.......-........................
.........|.....|.......\/..............|....-.-../|\.......\../..........\....\./....-.....|..../.../.........
........\...../......|.................................-...........................-.-.....|............|../..
-../.............\.....|..\......|.../........................./...-...../............../\-.........-.........
...........\.........-....................-.....\...............-.................\...-.../.......\...........
./........................\................-..../.\........./......-....|.............../.-.........../......\
....................-.............\.......\-................|................-.......................|..|.....
.......\.../.....|./..\..........-.........../.......|.................-..................|.|................/
.....\....|.................\.-./........|.........\..-.........\....\.......|...\....-...............-.......
......................................-...........-|..|.../..\...\.\../.................-|......\.....-.......
......|........|......................|....././....././........./......................-./...\................
..........\........|.....\......\......................|......./....................../.\............-.....|..
|.....-............./........|...\../.......|......../\.|.-......\.\........|....\............./..........\...
-.......................|..|/...........-.......-.....-............-........................./................
.......|....-......................\..........................-...|...........................................
\......\........|.\..\.............\-..............\./......................-.....|...../..|..-.............|.
......-.............................../......-........-|............-..........-.....\//.-/.....\..........-\.
...............................|.........|/.../................................................|..............)

matrix = String.split(input, "\n") |> Enum.map(&String.split(&1, "", trim: true))

defmodule BFS do
  def search(_matrix, queue, visited) when length(queue) == 0 do
    visited
  end

  def search(matrix, queue, visited) do
    [curr_beam | rest] = queue
    {curr_x, curr_y, curr_dir} = curr_beam

    if curr_x < 0 || curr_x >= length(matrix) || curr_y < 0 ||
         curr_y >= length(Enum.at(matrix, 0)) || curr_beam in visited do
      search(matrix, rest, visited)
    else
      next_visited = [curr_beam | visited]
      # IO.inspect([matrix, curr_x, curr_y])
      curr_char = matrix |> Enum.at(curr_x) |> Enum.at(curr_y)

      next_dirs =
        case {curr_char, curr_dir} do
          {".", _} ->
            [curr_dir]

          {"/", :up} ->
            [:right]

          {"/", :right} ->
            [:up]

          {"/", :down} ->
            [:left]

          {"/", :left} ->
            [:down]

          {"\\", :up} ->
            [:left]

          {"\\", :right} ->
            [:down]

          {"\\", :down} ->
            [:right]

          {"\\", :left} ->
            [:up]

          {"|", :up} ->
            [:up]

          {"|", :right} ->
            [:up, :down]

          {"|", :down} ->
            [:down]

          {"|", :left} ->
            [:up, :down]

          {"-", :up} ->
            [:left, :right]

          {"-", :right} ->
            [:right]

          {"-", :down} ->
            [:left, :right]

          {"-", :left} ->
            [:left]
        end

      next_beams =
        next_dirs
        |> Enum.map(fn dir ->
          case dir do
            :up -> {curr_x - 1, curr_y, dir}
            :right -> {curr_x, curr_y + 1, dir}
            :down -> {curr_x + 1, curr_y, dir}
            :left -> {curr_x, curr_y - 1, dir}
          end
        end)

      search(matrix, rest ++ next_beams, next_visited)
    end
  end
end

width = length(matrix)
height = length(Enum.at(matrix, 0))

topnbottom =
  for i <- 0..(width - 1) do
    [
      BFS.search(matrix, [{0, i, :down}], [])
      |> Enum.uniq_by(fn {x, y, _dir} -> {x, y} end)
      |> Enum.count(),
      BFS.search(matrix, [{height - 1, i, :up}], [])
      |> Enum.uniq_by(fn {x, y, _dir} -> {x, y} end)
      |> Enum.count()
    ]
  end
  |> Enum.flat_map(& &1)

leftnright =
  for i <- 0..(height - 1) do
    [
      BFS.search(matrix, [{i, 0, :right}], [])
      |> Enum.uniq_by(fn {x, y, _dir} -> {x, y} end)
      |> Enum.count(),
      BFS.search(matrix, [{i, width - 1, :left}], [])
      |> Enum.uniq_by(fn {x, y, _dir} -> {x, y} end)
      |> Enum.count()
    ]
  end
  |> Enum.flat_map(& &1)

ans = Enum.max(topnbottom ++ leftnright)

IO.inspect(ans, charlists: :as_list)
# 7932
# took 3m 18s

# brute force is very slow, thought to optimize it by caching descendants of each beam (ie position+direction), but got stuck on issue where if a beam is detected to be in a cycle, then the descendants is recorded only up to the last beam before an ancestor beam enters the cycle. This is correct for its specific entry beam, but other entry beam may enter the cycle at different point hence getting the wrong descendants.

# eg for this map
# ..\
# --/

# when a beam enters from first column down:
# v.\
# --/

# the cache would record beam (1,1,right) has descendant of:
# .<^
# .>>

# notice it stopped at (0,1) cos (0,0) was an ancestor beam
# now if a beam enters from second column down:
# .v\
# --/

# then it would hit the cache of (1,1,right) and would have missed (0,0) as part of the descendants which is wrong
# spent a day on this problem and ultimately gave up and just went with brute force
